{"version":3,"sources":["../src/oauth.ts"],"names":[],"mappings":"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","file":"oauth.js","sourcesContent":["/* istanbul ignore file */\r\n/* We ignore this file because OAuth endpoints are too taxing to test, they are instead manually tested. */\r\n\r\nimport YouTube, { YTComment, Channel, Playlist, Subscription, Video, VideoAbuseReportReason } from '.'\r\nimport { CommentThreadData, SubscriptionData, PlaylistData, PlaylistItemData, CommentData } from './constants'\r\nimport { GenericService } from './services'\r\nimport { Cache } from './util'\r\n\r\n/**\r\n * All methods requiring an OAuth access token.\r\n * Use `YouTube#oauth` to access these methods.\r\n */\r\nexport class OAuth {\r\n  public youtube: YouTube\r\n\r\n  /**\r\n   *\r\n   * @param youtube The YouTube object to retrieve the token from.\r\n   */\r\n  constructor (youtube: YouTube) {\r\n    this.youtube = youtube\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private checkTokenAndThrow () {\r\n    if (!this.youtube.accessToken) {\r\n      throw new Error('Must have an access token for OAuth related methods')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the authorized user's [[Channel]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   */\r\n  public getMe (): Promise<Channel> {\r\n    this.checkTokenAndThrow()\r\n    return GenericService.getItem(this.youtube, Channel, true) as Promise<Channel>\r\n  }\r\n\r\n  /**\r\n   * Gets the authorized user's [[Subscription]]s.  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param maxResults The maximum number of subscriptions to fetch.\r\n   * Fetches 10 by default. Set to a value <=0 to fetch all.\r\n   */\r\n  public getMySubscriptions (maxResults: number = 10): Promise<Subscription[]> {\r\n    this.checkTokenAndThrow()\r\n    return GenericService.getPaginatedItems(this.youtube, 'subscriptions', true, null, maxResults) as Promise<Subscription[]>\r\n  }\r\n\r\n  /**\r\n   * Gets the authorized user's [[Playlist]]s.  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param maxResults The maximum number of playlists to fetch.\r\n   * Fetches 10 by default. Set to a value <=0 to fetch all.\r\n   */\r\n  public getMyPlaylists (maxResults: number = 10): Promise<Playlist[]> {\r\n    this.checkTokenAndThrow()\r\n    return GenericService.getPaginatedItems(this.youtube, 'playlists:channel', true, null, maxResults) as Promise<Playlist[]>\r\n  }\r\n\r\n  /**\r\n   * Post a [[Comment]] on a [[Video]] or [[Channel]] discussion.  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param text The text content of the comment.\r\n   * @param channelId The channel to post the comment on.\r\n   * @param videoId The video of the channel to post the comment on.\r\n   * If falsey, the comment will be posted to the channel discussion.\r\n   */\r\n  public async postComment (text: string, channelId: string, videoId?: string): Promise<YTComment> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof CommentThreadData = JSON.parse(JSON.stringify(CommentThreadData))\r\n    data.snippet.topLevelComment.snippet.textOriginal = text\r\n    data.snippet.channelId = channelId\r\n\r\n    if (videoId) {\r\n      data.snippet.videoId = videoId\r\n    }\r\n\r\n    const result = await this.youtube._request.post('commentThreads', { part: 'snippet' }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    const type = result.snippet.channelId ? 'channel' : 'video'\r\n    return new YTComment(this.youtube, result.snippet.topLevelComment, type)\r\n  }\r\n\r\n  /**\r\n   * Replies to a [[YTComment]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param commentId The ID of the comment to reply to.\r\n   * @param text The text to reply with.\r\n   * @param commentType What this comment is on - defaults to video.\r\n   * Required for [[YTComment#url]] to be correct.\r\n   */\r\n  public async replyToComment (commentId: string, text: string) {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof CommentData = JSON.parse(JSON.stringify(CommentData))\r\n    data.snippet = { parentId: commentId, textOriginal: text }\r\n\r\n    const response = await this.youtube._request.post('comments', { part: 'id,snippet' }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    return new YTComment(this.youtube, response, response.snippet.channelId ? 'channel' : 'video')\r\n  }\r\n\r\n  /**\r\n   * Edit a [[Comment]] on a [[Video]] or [[Channel]] discussion.  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param text The new text content of the comment.\r\n   * @param commentId The ID of the comment.\r\n   */\r\n  public async editComment (text: string, commentId: string): Promise<YTComment> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof CommentThreadData = JSON.parse(JSON.stringify(CommentThreadData))\r\n    data.snippet.topLevelComment.snippet.textOriginal = text\r\n    data.id = commentId\r\n\r\n    const result = await this.youtube._request.put('commentThreads', { part: 'snippet' }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    const type = result.snippet.channelId ? 'channel' : 'video'\r\n    const comment = new YTComment(this.youtube, result.snippet.topLevelComment, type)\r\n\r\n    if (result.replies) {\r\n      result.replies.comments.forEach(reply => {\r\n        const created = new YTComment(this.youtube, reply, type)\r\n        comment.replies.push(created)\r\n      })\r\n    }\r\n\r\n    return comment\r\n  }\r\n\r\n  /**\r\n   * Edits a [[YTComment]] reply.  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param commentId The ID of the reply to edit.\r\n   * @param text The text to edit the reply to.\r\n   * @param commentType What this comment is on - defaults to video.\r\n   * Required for [[YTComment#url]] to be correct.\r\n   */\r\n  public async editCommentReply (commentId: string, text: string) {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof CommentData = JSON.parse(JSON.stringify(CommentData))\r\n    data.id = commentId\r\n    data.snippet.textOriginal = text\r\n\r\n    const response = await this.youtube._request.put('comments', { part: 'id,snippet' }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    return new YTComment(this.youtube, response, response.snippet.channelId ? 'channel' : 'video')\r\n  }\r\n\r\n  /**\r\n   * Marks a [[YTComment]] as spam.  \r\n   * Last tested NEVER\r\n   * @param commentId The ID of the comment to mark as spam.\r\n   */\r\n  public markCommentAsSpam (commentId: string): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n    return this.youtube._request.post('comments/markAsSpam', { id: commentId }, null, null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Sets the moderation status of a [[YTComment]]  \r\n   * Last tested NEVER\r\n   * @param commentId The ID of the comment to set the moderation status of.\r\n   * @param moderationStatus The moderation status to set the comment to.\r\n   * @param banAuthor Whether or not to ban the author from making future comments.\r\n   */\r\n  public setCommentModerationStatus (commentId: string, moderationStatus: 'heldForReview' | 'published' | 'rejected', banAuthor?: boolean): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: {\r\n      id: string\r\n      moderationStatus: string\r\n      banAuthor?: boolean\r\n    } = {\r\n      id: commentId,\r\n      moderationStatus\r\n    }\r\n\r\n    if (banAuthor) {\r\n      data.banAuthor = banAuthor\r\n    }\r\n\r\n    return this.youtube._request.post('comments/setModerationStatus', data, null, null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Deletes a [[YTComment]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param id The ID of the comment to delete.\r\n   */\r\n  public deleteComment (id: string): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n    return this.youtube._request.delete('comments', { id }, null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a [[Channel]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param channelId The channel to subscribe to.\r\n   * @returns A partial subscription object.\r\n   */\r\n  public async subscribeToChannel (channelId: string): Promise<Subscription> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof SubscriptionData = JSON.parse(JSON.stringify(SubscriptionData))\r\n    data.snippet.resourceId.channelId = channelId\r\n\r\n    const result = await this.youtube._request.post('subscriptions', { part: 'snippet' }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    return new Subscription(this.youtube, result)\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a [[Channel]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param channelId The channel to unsubscribe from.\r\n   */\r\n  public unsubscribeFromChannel (subscriptionId: string): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n    return this.youtube._request.delete('subscriptions', { id: subscriptionId }, null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Like, dislike, or remove a rating from a [[Video]].\r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param videoId The video to rate.\r\n   * @param rating The rating to give the video.\r\n   */\r\n  public rateVideo (videoId: string, rating: 'like' | 'dislike' | 'none'): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n    return this.youtube._request.post('videos/rate', { id: videoId, rating }, null, null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Retrieve your rating on a [[Video]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param videoId The video to retrieve your rating from.\r\n   */\r\n  public async getMyRatings (videoIds: string[]): Promise<{ videoId: string; rating: 'like' | 'dislike' | 'none' | 'unspecified' }[]> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const cached = Cache.get(`get://videos/getRating/${JSON.stringify(videoIds)}`)\r\n\r\n    if (this.youtube._shouldCache && cached) {\r\n      return cached\r\n    }\r\n\r\n    const response = await this.youtube._request.api('videos/getRating', { id: videoIds.join(',') }, null, this.youtube.accessToken)\r\n    this.youtube._cache(`get://videos/getRating/${JSON.stringify(videoIds)}`, response.items)\r\n\r\n    return response.items\r\n  }\r\n\r\n  /**\r\n   * Report a [[Video]] for abuse.  \r\n   * Last tested NEVER\r\n   * @param videoId The video to report.\r\n   * @param reasonId The reason for reporting. (IDs can be found [here](https://developers.google.com/youtube/v3/docs/videoAbuseReportReasons/list))\r\n   * @param secondaryReasonId An optional second reason for reporting.\r\n   * @param comments Any additional information.\r\n   * @param language The language that the reporter speaks.\r\n   */\r\n  public reportAbuse (videoId: string, reasonId: string, secondaryReasonId?: string, comments?: string, language?: string): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: {\r\n      videoId: string\r\n      reasonId: string\r\n      secondaryReasonId?: string\r\n      comments?: string\r\n      language?: string\r\n    } = {\r\n      videoId,\r\n      reasonId\r\n    }\r\n\r\n    if (secondaryReasonId) data.secondaryReasonId = secondaryReasonId\r\n    if (comments) data.comments = comments\r\n    if (language) data.language = language\r\n\r\n    return this.youtube._request.post('videos/reportAbuse', null, JSON.stringify(data), null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Deletes a [[Video]].\r\n   * Last tested NEVER\r\n   * @param videoId The video to delete.\r\n   */\r\n  public deleteVideo (videoId: string): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n    return this.youtube._request.delete('videos', { id: videoId }, null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Updates a [[Video]].  \r\n   * **If your request does not specify a value for a property that already has a value,\r\n   * the property's existing value will be deleted.**  \r\n   * Last tested NEVER\r\n   * @param video The updated video object.\r\n   */\r\n  public async updateVideo (video: VideoUpdateResource): Promise<Video> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const parts = []\r\n\r\n    if (video.snippet) {\r\n      parts.push('snippet')\r\n      if (Array.isArray(video.snippet.tags)) video.snippet.tags = video.snippet.tags.join(',')\r\n    }\r\n\r\n    if (video.status) {\r\n      parts.push('status')\r\n      if (video.status.publishAt instanceof Date) video.status.publishAt = video.status.publishAt.toISOString()\r\n    }\r\n\r\n    if (video.recordingDetails) {\r\n      parts.push('recordingDetails')\r\n\r\n      if (video.recordingDetails.recordingDate instanceof Date) {\r\n        video.recordingDetails.recordingDate = video.recordingDetails.recordingDate.toISOString()\r\n      }\r\n    }\r\n\r\n    if (video.localizations) parts.push('localizations')\r\n\r\n    if (parts.length === 0) {\r\n      return this.youtube.getVideo(video.id)\r\n    }\r\n\r\n    const response = await this.youtube._request.put('videos', { part: parts.join(',') }, JSON.stringify(video), null, this.youtube.accessToken)\r\n    return new Video(this.youtube, response)\r\n  }\r\n\r\n  /**\r\n   * Sets a new [[Thumbnail]] for a [[Video]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param videoId The video to set the thumbnail for.\r\n   * @param image The image data and type to upload.\r\n   */\r\n  public async setThumbnail (videoId: string, image: { type: 'jpeg' | 'png'; data: Buffer }): Promise<typeof Video.prototype.thumbnails> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const response = await this.youtube._upload.imagePost('thumbnails/set', image.data, image.type, { videoId }, null, this.youtube.accessToken)\r\n    return response.items[0]\r\n  }\r\n\r\n  /**\r\n   * Creates a [[Playlist]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param title A title for the playlist.\r\n   * @param description A description of the playlist.\r\n   * @param privacy Whether the video is private, public, or unlisted.\r\n   * @param tags Tags pertaining to the playlist.\r\n   * @param language The language of the playlist's default title and description.\r\n   * @param localizations Translated titles and descriptions.\r\n   */\r\n  public async createPlaylist (title: string, description?: string, privacy?: 'private' | 'public' | 'unlisted', tags?: string[], language?: string,\r\n    localizations?: {[language: string]: { title: string; description: string }}): Promise<Playlist> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof PlaylistData = JSON.parse(JSON.stringify(PlaylistData))\r\n    const parts: string[] = [ 'id', 'player' ]\r\n\r\n    data.snippet = { title }\r\n\r\n    if (description) data.snippet.description = description\r\n    if (privacy) data.status = { privacyStatus: privacy }\r\n    if (tags) data.snippet.tags = tags.join(',')\r\n    if (language) data.snippet.defaultLanguage = language\r\n    if (localizations) data.localizations = localizations\r\n\r\n    if (description || tags || language) parts.push('snippet')\r\n    if (privacy) parts.push('status')\r\n    if (localizations) parts.push('localizations')\r\n\r\n    const response = await this.youtube._request.post('playlists', { part: parts.join(',') }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    return new Playlist(this.youtube, response)\r\n  }\r\n\r\n  /**\r\n   * Updates a [[Playlist]].  \r\n   * **If your request does not specify a value for a property that already has a value,\r\n   * the property's existing value will be deleted.**  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param id The ID of the playlist to update.\r\n   * @param title A title for the playlist.\r\n   * @param description A description of the playlist.\r\n   * @param privacy Whether the video is private, public, or unlisted.\r\n   * @param tags Tags pertaining to the playlist.\r\n   * @param language The language of the playlist's default title and description.\r\n   * @param localizations Translated titles and descriptions.\r\n   */\r\n  public async updatePlaylist (id: string, title: string, description?: string, privacy?: 'private' | 'public' | 'unlisted', tags?: string[], language?: string,\r\n    localizations?: {[language: string]: { title: string; description: string }}): Promise<Playlist> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof PlaylistData = JSON.parse(JSON.stringify(PlaylistData))\r\n    const parts: string[] = [ 'id', 'player' ]\r\n\r\n    data.id = id\r\n    data.snippet = { title }\r\n\r\n    if (description) data.snippet.description = description\r\n    if (privacy) data.status = { privacyStatus: privacy }\r\n    if (tags) data.snippet.tags = tags.join(',')\r\n    if (language) data.snippet.defaultLanguage = language\r\n    if (localizations) data.localizations = localizations\r\n\r\n    if (description || tags || language) parts.push('snippet')\r\n    if (privacy) parts.push('status')\r\n    if (localizations) parts.push('localizations')\r\n\r\n    const response = await this.youtube._request.put('playlists', { part: parts.join(',') }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    return new Playlist(this.youtube, response)\r\n  }\r\n\r\n  /**\r\n   * Deletes a [[Playlist]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param id The ID of the playlist to delete.\r\n   */\r\n  public deletePlaylist (id: string): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n    return this.youtube._request.delete('playlists', { id }, null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Adds a [[Video]] to a [[Playlist]].  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param playlistId The ID of the playlist to add the video to.\r\n   * @param videoId The ID of the video to add to the playlist.\r\n   * @param position The position to add the video in. Defaults to the end.\r\n   * @param note A user-generated note on the video.\r\n   * @returns A partial video object.\r\n   */\r\n  public async addPlaylistItem (playlistId: string, videoId: string, position?: number, note?: string): Promise<Video> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof PlaylistItemData = JSON.parse(JSON.stringify(PlaylistItemData))\r\n    const parts: string[] = [ 'id', 'snippet' ]\r\n\r\n    data.snippet.playlistId = playlistId\r\n    data.snippet.resourceId.videoId = videoId\r\n\r\n    if (position) data.snippet.position = position\r\n    if (note) data.contentDetails = { note }\r\n\r\n    if (note) parts.push('contentDetails')\r\n\r\n    const response = await this.youtube._request.post('playlistItems', { part: parts.join(',') }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    return new Video(this.youtube, response)\r\n  }\r\n\r\n  /**\r\n   * Edits a playlist item.  \r\n   * **If your request does not specify a value for a property that already has a value,\r\n   * the property's existing value will be deleted.**  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param id The ID of the playlist item to edit.\r\n   * @param playlistId The ID of the playlist that the video is in.\r\n   * @param videoId The ID of the video that is in the playlist.\r\n   * @param position The position to change the playlist item's to.\r\n   * @param note The note to change the playlist item's to.\r\n   * @returns A partial video object.\r\n   */\r\n  public async updatePlaylistItem (id: string, playlistId: string, videoId: string, position?: number, note?: string): Promise<Video> {\r\n    this.checkTokenAndThrow()\r\n\r\n    const data: typeof PlaylistItemData = JSON.parse(JSON.stringify(PlaylistItemData))\r\n    const parts: string[] = [ 'id', 'snippet' ]\r\n\r\n    data.id = id\r\n    data.snippet.playlistId = playlistId\r\n    data.snippet.resourceId.videoId = videoId\r\n\r\n    if (position) data.snippet.position = position\r\n    if (note) data.contentDetails = { note }\r\n\r\n    if (note) parts.push('contentDetails')\r\n\r\n    const response = await this.youtube._request.put('playlistItems', { part: parts.join(',') }, JSON.stringify(data), null, this.youtube.accessToken)\r\n    return new Video(this.youtube, response)\r\n  }\r\n\r\n  /**\r\n   * Deletes a playlist item.  \r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   * @param id The ID of the playlist item to delete.\r\n   */\r\n  public deletePlaylistItem (id: string): Promise<void> {\r\n    this.checkTokenAndThrow()\r\n    return this.youtube._request.delete('playlistItems', { id }, null, this.youtube.accessToken)\r\n  }\r\n\r\n  /**\r\n   * Get a list of [[VideoAbuseReportReason]]s.\r\n   * Last tested 05/18/2020 11:48. PASSING\r\n   */\r\n  public getVideoAbuseReportReasons () {\r\n    this.checkTokenAndThrow()\r\n    return GenericService.getPaginatedItems(this.youtube, 'videoAbuseReportReasons', false) as Promise<VideoAbuseReportReason[]>\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}