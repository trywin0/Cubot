{"version":3,"sources":["../src/entities/playlist.ts"],"names":[],"mappings":"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","file":"playlist.js","sourcesContent":["import { YouTube, Video, Thumbnail } from '..'\nimport { GenericService } from '../services'\n\n/**\n * A YouTube playlist.\n */\nexport class Playlist {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'playlists'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet,contentDetails,player'\n\n  /**\n   * The fields to request for this entity.\n   */\n  public static fields = 'items(kind,id,snippet(tags,title,description,channelId,publishedAt,thumbnails),contentDetails(itemCount),player(embedHtml))'\n\n  /**\n   * The YouTube object that created this playlist.\n   */\n  public youtube: YouTube\n\n  /**\n   * The raw data of this playlist.\n   */\n  public data: any\n\n  /**\n   * Whether or not this is a full playlist object.\n   */\n  public full: boolean\n\n  /**\n   * The ID of this playlist.\n   */\n  public id: string\n\n  /**\n   * The title of the playlist.\n   */\n  public title: string\n\n  /**\n   * The description of the playlist.\n   */\n  public description: string\n\n  /**\n   * The videos in the playlist. Only available after calling `Playlist#fetchVideos()`.\n   */\n  public videos: Video[]\n\n  /**\n   * The ID of the creator of the playlist.\n   */\n  public creatorId: string\n\n  /**\n   * The url of the playlist.\n   */\n  public url: string\n\n  /**\n   * The date the playlist was created.\n   */\n  public dateCreated: Date\n\n  /**\n   * The thumbnails for the playlist.\n   */\n  public thumbnails: {\n    default?: Thumbnail\n    high?: Thumbnail\n    maxres?: Thumbnail\n    medium?: Thumbnail\n    standard?: Thumbnail\n  }\n\n  /**\n   * The number of items in the playlist.\n   */\n  public length: number\n\n  /**\n   * An \\<iframe\\> tag that embeds a player that will play the playlist.\n   */\n  public embedHtml: string\n\n  /**\n   * The tags of the playlist.\n   */\n  public tags: string[]\n\n  constructor (youtube: YouTube, data: any) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  /**\n   * @ignore\n   */\n  private _init (data: any) {\n    if (data.kind === 'youtube#playlist') {\n      const playlist = data\n\n      this.id = playlist.id\n      /* istanbul ignore next */\n      this.tags = playlist.snippet ? playlist.snippet.tags : undefined\n      /* istanbul ignore next */\n      this.length = playlist.contentDetails ? playlist.contentDetails.itemCount : undefined\n      /* istanbul ignore next */\n      this.embedHtml = playlist.player ? playlist.player.embedHtml : undefined\n    } else if (data.kind === 'youtube#searchResult') {\n      this.full = false\n      this.id = data.id.playlistId\n    } else {\n      throw new Error(`Invalid playlist type: ${data.kind}`)\n    }\n\n    /* istanbul ignore next */\n    if (data.snippet) {\n      this.tags = data.snippet.tags\n      this.title = data.snippet.title\n      this.description = data.snippet.description\n      this.creatorId = data.snippet.channelId\n      this.dateCreated = new Date(data.snippet.publishedAt)\n      this.thumbnails = data.snippet.thumbnails\n    } else {\n      this.full = false\n    }\n\n    this.url = `https://youtube.com/playlist?list=${this.id}`\n  }\n\n  /**\n   * Adds videos in this playlist to the `videos` property of this playlist.\n   * @param maxResults Fetches all videos if <=0.\n   */\n  public async fetchVideos (maxResults: number = 10) {\n    this.videos = await this.youtube.getPlaylistItems(this.id, maxResults)\n    return this.videos\n  }\n\n  /**\n   * Fetches this playlist and reassigns this object to the new playlist object.\n   * Only useful if `this.full` is false, or if you want updated playlist info.\n   */\n  public async fetch () {\n    const playlist = await this.youtube.getPlaylist(this.id)\n    return Object.assign(this, playlist)\n  }\n\n  /**\n   * Adds a [[Video]] to the playlist.\n   * Must be using an access token with correct scopes.\n   * @param videoResolvable The URL, ID, or Title of the video.\n   * @param position The zero-based position to insert the video in.\n   * @param note A note on the video.\n   */\n  /* istanbul ignore next */\n  public async addVideo (videoResolvable: string, position?: number, note?: string) {\n    const videoId = await GenericService.getId(this.youtube, videoResolvable, Video)\n    const video = await this.youtube.oauth.addPlaylistItem(this.id, videoId, position, note)\n\n    if (this.videos) {\n      this.videos.push(video)\n    } else {\n      this.videos = [ video ]\n    }\n\n    return video\n  }\n\n  /**\n   * Updates a [[Video]] in the playlist.\n   * Must be using an access token with correct scopes.\n   * @param videoResolvable The URL, ID, or Title of the video.\n   * @param position The zero-based position to move the video to.\n   * @param note A new note on the video.\n   * @param itemId The playlist item ID if you have it.\n   */\n  /* istanbul ignore next */\n  public async updateVideo (videoResolvable: string, position?: number, note?: string, itemId?: string) {\n    const videoId = await GenericService.getId(this.youtube, videoResolvable, Video)\n    const playlistItemId = itemId ? itemId : (await GenericService.getPaginatedItems(this.youtube, 'playlistItems', false, this.id, 1, videoId))[0].id\n\n    return this.youtube.oauth.updatePlaylistItem(playlistItemId, this.id, videoId, position, note)\n  }\n\n  /**\n   * Removes a [[Video]] from the playlist.\n   * Must be using an access token with correct scopes.\n   * @param videoResolvable The URL, ID, or Title of the video. Must specify this or `itemId`.\n   * @param itemId The playlist item ID if you have it. Must specify this or `videoResolvable`.\n   */\n  /* istanbul ignore next */\n  public async removeVideo (videoResolvable?: string, itemId?: string) {\n    if (!videoResolvable && !itemId) {\n      return Promise.reject('Must specify either videoResolvable or itemId')\n    }\n\n    const playlistItemId = itemId ? itemId : (await GenericService.getPaginatedItems(this.youtube, 'playlistItems', false, this.id, 1,\n      await GenericService.getId(this.youtube, videoResolvable, Video)))[0].id\n\n    await this.youtube.oauth.deletePlaylistItem(playlistItemId)\n\n    if (this.videos) {\n      const index = this.videos.findIndex(v => v.data.id === playlistItemId)\n\n      if (index) {\n        this.videos.splice(index, 1)\n      }\n    }\n  }\n}\n"],"sourceRoot":"../../src"}