{"version":3,"sources":["../src/entities/channel.ts"],"names":[],"mappings":"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","file":"channel.js","sourcesContent":["import { YouTube, Playlist, Thumbnail, Banners, YTComment, Subscription } from '..'\n\n/**\n * A YouTube channel.\n */\nexport class Channel {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'channels'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet,contentDetails,statistics,status,brandingSettings'\n\n  /**\n   * The fields to request for this entity.\n   */\n  public static fields = 'items(kind,id,contentDetails(relatedPlaylists(uploads)),statistics(subscriberCount,commentCount,viewCount,hiddenSubscriberCount),' +\n    'snippet(title,description,thumbnails,publishedAt,country,defaultLanguage),brandingSettings(image,channel(keywords,featuredChannelsUrls)),' +\n    'status(isLinked,madeForKids,selfDeclaredMadeForKids))'\n\n  /**\n   * The YouTube object that created this channel object.\n   */\n  public youtube: YouTube\n\n  /**\n   * Whether or not this a full channel object.\n   */\n  public full: boolean\n\n  /**\n   * The raw data of this channel.\n   */\n  public data: any\n\n  /**\n   * The name of this channel.\n   */\n  public name: string\n\n  /**\n   * The description of this channel.\n   */\n  public about: string\n\n  /**\n   * The ID of this channel.\n   */\n  public id: string\n\n  /**\n   * The country this channel is based in.\n   */\n  public country: string\n\n  /**\n   * The url of the channel.\n   */\n  public url: string\n\n  /**\n   * This channel's custom URL, if they have one.\n   */\n  public customUrl: string\n\n  /**\n   * This channel's profile pictures.\n   */\n  public profilePictures: {\n    default?: Thumbnail\n    high?: Thumbnail\n    maxres?: Thumbnail\n    medium?: Thumbnail\n    standard?: Thumbnail\n  }\n\n  /**\n   * This channel's banners.\n   */\n  public banners: Banners\n\n  /**\n   * The date this channel was created.\n   */\n  public dateCreated: Date\n\n  /**\n   * The default language for this channel's uploads.\n   */\n  public language: string\n\n  /**\n   * This channel's view count.\n   */\n  public views: number\n\n  /**\n   * This channel's keywords.\n   */\n  public keywords: string[]\n\n  /**\n   * The channel's uploads. Only available after calling `Channel#fetchVideos()`\n   */\n  public videos: Playlist\n\n  /**\n   * The number of subscribers this channel has. `-1` if the subcount is hidden.\n   */\n  public subCount: number\n\n  /**\n   * This channel's comment count.\n   */\n  public commentCount: number\n\n  /**\n   * The channel's comments. Only defined when `Channel#fetchComments` is called.\n   */\n  public comments: YTComment[]\n\n  /**\n   * The URLs of all of this channel's featured channels.\n   */\n  public featuredChannels: string[]\n\n  /**\n   * The channel's playlists. Only defined when `Channel#fetchPlaylists` is called.\n   */\n  public playlists: Playlist[]\n\n  /**\n   * The channel's subscriptions. Only defined when `Channel#fetchSubscriptions` is called.\n   */\n  public subscriptions: Subscription[]\n\n  /**\n   * Only set if the channel is a search result.\n   *\n   * If the channel has an ongoing livestream, this is `live`.\n   * If the channel has an upcoming livestream, this is `upcoming`.\n   * If the channel has neither an ongoing nor upcoming livestream, this is `false`.\n   */\n  public liveStatus: 'live' | 'upcoming' | false\n\n  /**\n   * Properties to do with videos made for children.\n   */\n  public kids: {\n    /**\n     * Whether or not the video was made for children.\n     */\n    madeForKids: boolean\n\n    /**\n     * Whether or not the poster of the video marked it as made for kids.\n     */\n    selfDeclaredMadeForKids: boolean\n  }\n\n  constructor (youtube: YouTube, data: any) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  /**\n   * @ignore\n   */\n  private _init (data: any) {\n    /* istanbul ignore next */\n    if (data.kind === 'youtube#channel' && (!data.status || data.status.isLinked)) {\n      const channel = data\n\n      this.id = channel.id\n\n      /* istanbul ignore next */\n      if (channel.snippet) {\n        this.country = channel.snippet.country\n        this.language = channel.snippet.defaultLanguage\n      } else {\n        this.full = false\n      }\n\n      /* istanbul ignore next */\n      if (channel.statistics) {\n        this.views = Number(channel.statistics.viewCount)\n        this.commentCount = Number(channel.statistics.commentCount)\n\n        if (!channel.statistics.hiddenSubscriberCount) {\n          this.subCount = Number(channel.statistics.subscriberCount)\n        } else {\n          this.subCount = -1\n        }\n      } else {\n        this.full = false\n      }\n\n      if (channel.status) {\n        this.kids = {\n          madeForKids: channel.status.madeForKids,\n          selfDeclaredMadeForKids: channel.status.selfDeclaredMadeForKids\n        }\n      } else {\n        this.full = false\n      }\n\n      /* istanbul ignore next */\n      if (channel.brandingSettings) {\n        this.banners = channel.brandingSettings.image\n\n        // Unknown behavior\n        /* istanbul ignore next */\n        if (channel.brandingSettings.channel) {\n          this.keywords = []\n\n          if (channel.brandingSettings.channel.keywords) {\n            // Split by spaces but keep quotations intact\n            const broken: string[] = channel.brandingSettings.channel.keywords.split(/( )(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/i)\n\n            for (let i = 0; i < broken.length; i++) {\n              if (i % 2 === 0) {\n                this.keywords.push(broken[i].replace(/(^\"|\"$)/gi, ''))\n              }\n            }\n          }\n\n          this.featuredChannels = channel.brandingSettings.channel.featuredChannelsUrls ?\n            channel.brandingSettings.channel.featuredChannelsUrls.map(id => `https://www.youtube.com/channel/${id}`) : []\n        }\n      } else {\n        this.full = false\n      }\n    } else if (data.kind === 'youtube#searchResult') {\n      this.full = false\n      this.id = data.id.channelId\n\n      /* istanbul ignore next */\n      if (data.snippet) {\n        // Impossible to test\n        /* istanbul ignore next */\n        this.liveStatus = data.snippet.liveBroadcastContent !== 'none' ? data.snippet.liveBroadcastContent : false\n      }\n    } else {\n      throw new Error(`Invalid channel type: ${data.kind}`)\n    }\n\n    /* istanbul ignore next */\n    if (data.snippet) {\n      this.profilePictures = data.snippet.thumbnails\n      this.dateCreated = new Date(data.snippet.publishedAt)\n      this.name = data.snippet.title\n      this.about = data.snippet.description\n    } else {\n      this.full = false\n    }\n\n    this.url = `https://youtube.com/channel/${this.id}`\n  }\n\n  /**\n   * Posts a comment on the channel's discussion tab.\n   * Must be using an access token with correct scopes.\n   * @param text The text of the comment.\n   */\n  /* istanbul ignore next */\n  public async postComment (text: string) {\n    const comment = await this.youtube.oauth.postComment(text, this.id)\n\n    if (this.comments !== undefined) {\n      this.comments.push(comment)\n    } else {\n      this.comments = [ comment ]\n    }\n\n    return comment\n  }\n\n  /**\n   * Fetches this channel and reassigns this object to the new channel object.\n   * Only useful if `this.full` is false, or if you want updated channel info.\n   */\n  public async fetch () {\n    const channel = await this.youtube.getChannel(this.id)\n    return Object.assign(this, channel)\n  }\n\n  /**\n   * Fetches the channel's videos and assigns them to the `Channel#videos` property.\n   */\n  public async fetchVideos () {\n    if (!(this.data.contentDetails)) {\n      await this.fetch()\n    }\n\n    const videos = await this.youtube.getPlaylist(this.data.contentDetails.relatedPlaylists.uploads)\n    this.videos = videos\n\n    return this.videos\n  }\n\n  /**\n   * Fetches the channel's discussion tab comments and assigns them to Channel#comments.\n   * @param maxResults The maximum amount of comments to fetch\n   */\n  public async fetchComments (maxResults: number = 10) {\n    this.comments = await this.youtube.getChannelComments(this.id, maxResults)\n    return this.comments\n  }\n\n  /**\n   * Fetches the channel's playlists and assigns them to Channel#playlists.\n   * @param maxResults The maximum amount of playlists to fetch\n   */\n  public async fetchPlaylists (maxResults: number = 10) {\n    this.playlists = await this.youtube.getChannelPlaylists(this.id, maxResults)\n    return this.playlists\n  }\n\n  /**\n   * Fetches the channel's subscriptions and assigns them to Channel#subscriptions.\n   * @param maxResults The maximum amount of subscriptions to fetch\n   */\n  /* istanbul ignore next */\n  public async fetchSubscriptions (maxResults: number = 10) {\n    this.subscriptions = await this.youtube.getChannelSubscriptions(this.id, maxResults)\n    return this.subscriptions\n  }\n\n  /**\n   * Subscribes to the channel.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public subscribe () {\n    return this.youtube.oauth.subscribeToChannel(this.id)\n  }\n\n  /**\n   * Unsubscribes from the channel.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public unsubscribe () {\n    return this.youtube.oauth.unsubscribeFromChannel(this.id)\n  }\n}\n"],"sourceRoot":"../../src"}