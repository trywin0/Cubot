{"version":3,"sources":["../src/entities/video.ts"],"names":[],"mappings":"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","file":"video.js","sourcesContent":["import { YouTube } from '..'\nimport { Thumbnail, ISODuration } from '../types'\nimport { YTComment } from './comment'\nimport { Parser } from '../util'\n\n/**\n * A YouTube video.\n */\nexport class Video {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'videos'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet,contentDetails,statistics,status'\n\n  /**\n   * The fields to request for this entity.\n   */\n  public static fields = 'items(kind,id,contentDetails(duration),statistics(likeCount,dislikeCount,viewCount,commentCount),' +\n    'status(privacyStatus,madeForKids,selfDeclaredMadeForKids),snippet(title,description,thumbnails,tags,publishedAt,channelId,liveBroadcastContent,categoryId))'\n\n  /**\n   * YouTube object that created the video.\n   */\n  public youtube: YouTube\n\n  /**\n   * The raw data of the video.\n   */\n  public data: any\n\n  /**\n   * Whether or not this is a full video object.\n   */\n  public full: boolean\n\n  /**\n   * The ID of the video.\n   */\n  public id: string\n\n  /**\n   * The title of the video.\n   */\n  public title: string\n\n  /**\n   * The description of the video.\n   */\n  public description: string\n\n  /**\n   * The thumbnails of the video.\n   */\n  public thumbnails: {\n    default?: Thumbnail\n    medium?: Thumbnail\n    high?: Thumbnail\n    standard?: Thumbnail\n    maxres?: Thumbnail\n  }\n\n  /**\n   * The tags of the video.\n   */\n  public tags: string[]\n\n  /**\n   * The date the video was published.\n   */\n  public datePublished: Date\n\n  /**\n   * The ID of the channel that uploaded the video.\n   */\n  public channelId: string\n\n  /**\n   * @ignore\n   */\n  public _length: ISODuration\n\n  /**\n   * The minutes of the video.\n   */\n  public minutes: number\n\n  /**\n   * The seconds of the video.\n   */\n  public seconds: number\n\n  /**\n   * The url of the video.\n   */\n  public url: string\n\n  /**\n   * The short url of the video, i.e. https://youtu.be/id\n   */\n  public shortUrl: string\n\n  /**\n   * The number of likes the video has.\n   */\n  public likes: number\n\n  /**\n   * The number of dislikes the video has.\n   */\n  public dislikes: number\n\n  /**\n   * The number of views the video has.\n   */\n  public views: number\n\n  /**\n   * Whether or not this video COULD BE private. True if the video might\n   * be private, as you cannot check if playlist items are private.\n   *\n   * I would recommend that you try and fetch the video and catch an error\n   * if it is from a playlist & marked as private.\n   */\n  public private: boolean\n\n  /**\n   * The video's comments. Only defined when Video#fetchComments is called.\n   */\n  public comments: YTComment[]\n\n  /**\n   * The number of comments on the video.\n   */\n  public commentCount: number\n\n  /**\n   * If this is a ongoing livestream, this is `live`.\n   * If this is an upcoming livestream, this is `upcoming`.\n   * If this is not a livestream, this is `false`.\n   */\n  public liveStatus: 'live' | 'upcoming' | false\n\n  /**\n   * The video category associated with the video.\n   */\n  public category: string\n\n  /**\n   * Properties to do with videos made for children.\n   */\n  public kids: {\n    /**\n     * Whether or not the video was made for children.\n     */\n    madeForKids: boolean\n\n    /**\n     * Whether or not the poster of the video marked it as made for kids.\n     */\n    selfDeclaredMadeForKids: boolean\n  }\n\n  constructor (youtube: YouTube, data: any) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  /**\n   * @ignore\n   */\n  private _init (data: any) {\n    if (data.kind === 'youtube#video') {\n      const video = data\n\n      /* istanbul ignore next */\n      if (video.contentDetails) {\n        this._length = Parser.parseIsoDuration(video.contentDetails.duration)\n        this.minutes = (this._length.hours * 60) + this._length.minutes\n        this.seconds = this._length.seconds\n      } else {\n        this.full = false\n      }\n\n      /* istanbul ignore next */\n      if (video.statistics) {\n        this.likes = Number(video.statistics.likeCount)\n        this.dislikes = Number(video.statistics.dislikeCount)\n        this.views = Number(video.statistics.viewCount)\n        this.commentCount = Number(video.statistics.commentCount)\n      } else {\n        this.full = false\n      }\n\n      this.id = video.id\n    } else if (data.kind === 'youtube#playlistItem') {\n      this.full = false\n      this.id = data.snippet.resourceId.videoId\n      this.private = data.snippet.title === 'Private video'\n    } else if (data.kind === 'youtube#searchResult') {\n      this.full = false\n      this.id = data.id.videoId\n    } else {\n      throw new Error(`Invalid video type: ${data.kind}`)\n    }\n\n    /* istanbul ignore next */\n    if (data.snippet) {\n      this.title = data.snippet.title\n      this.description = data.snippet.description\n      this.thumbnails = data.snippet.thumbnails\n      this.tags = data.snippet.tags\n      this.datePublished = new Date(data.snippet.publishedAt)\n      this.channelId = data.snippet.channelId\n      // Impossible to test\n      /* istanbul ignore next */\n      this.liveStatus = data.snippet.liveBroadcastContent !== 'none' ? data.snippet.liveBroadcastContent : false\n      this.category = data.snippet.categoryId\n    } else {\n      this.full = false\n    }\n\n    /* istanbul ignore next */\n    if (data.status) {\n      this.private = data.status.privacyStatus === 'private'\n      this.kids = {\n        madeForKids: data.status.madeForKids,\n        selfDeclaredMadeForKids: data.status.selfDeclaredMadeForKids\n      }\n    } else {\n      this.full = false\n    }\n\n    this.url = `https://youtube.com/watch?v=${this.id}`\n    this.shortUrl = `https://youtu.be/${this.id}`\n\n    return this\n  }\n\n  /**\n   * Posts a comment to the video.\n   * Must be using an access token with correct scopes.\n   * @param text The text of the comment.\n   */\n  /* istanbul ignore next */\n  public async postComment (text: string) {\n    const comment = await this.youtube.oauth.postComment(text, this.channelId, this.id)\n\n    if (this.comments !== undefined) {\n      this.comments.push(comment)\n    } else {\n      this.comments = [ comment ]\n    }\n\n    return comment\n  }\n\n  /**\n   * Fetches this video and reassigns this object to the new video object.\n   * Only useful if `this.full` is false, or if you want updated video info.\n   */\n  public async fetch () {\n    const video = await this.youtube.getVideo(this.id)\n    return Object.assign(this, video)\n  }\n\n  /**\n   * Fetches the video's comments and assigns them to Video#comments.\n   * @param maxResults The maximum amount of comments to fetch\n   */\n  public async fetchComments (maxResults: number = 10) {\n    this.comments = await this.youtube.getVideoComments(this.id, maxResults)\n    return this.comments\n  }\n\n  /**\n   * Gets the user's rating on the video.\n   */\n  /* istanbul ignore next */\n  public async getRating (): Promise<'like' | 'dislike' | 'none' | 'unspecified'> {\n    const response = await this.youtube.oauth.getMyRatings([ this.id ])\n    return response[0].rating\n  }\n\n  /**\n   * Likes the video.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public like () {\n    return this.youtube.oauth.rateVideo(this.id, 'like')\n  }\n\n  /**\n   * Dislikes the video.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public dislike () {\n    return this.youtube.oauth.rateVideo(this.id, 'dislike')\n  }\n\n  /**\n   * Removes the user's like/dislike on the video.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public unrate () {\n    return this.youtube.oauth.rateVideo(this.id, 'none')\n  }\n\n  /**\n   * Reports the video for abuse.\n   * Must be using an access token with correct scopes.\n   * @param reasonId The reason for reporting. (IDs can be found [here](https://developers.google.com/youtube/v3/docs/videoAbuseReportReasons/list))\n   * @param secondaryReasonId An optional second reason for reporting.\n   * @param comments Any additional information.\n   * @param language The language that the reporter speaks.\n   */\n  /* istanbul ignore next */\n  public reportAbuse (reasonId: string, secondaryReasonId?: string, comments?: string, language?: string) {\n    return this.youtube.oauth.reportAbuse(this.id, reasonId, secondaryReasonId, comments, language)\n  }\n\n  /**\n   * Deletes the video.\n   * Must be using an access token with correct scopes.\n   */\n  /* istanbul ignore next */\n  public delete () {\n    return this.youtube.oauth.deleteVideo(this.id)\n  }\n\n  /**\n   * Edits the video.\n   * Must be using an access token with correct scopes.  \n   * **If your request does not specify a value for a property that already has a value,\n   * the property's existing value will be deleted.**\n   * @param video The updated video object.\n   */\n  /* istanbul ignore next */\n  public async update (video: VideoUpdateResource): Promise<Video> {\n    const newVideo = await this.youtube.oauth.updateVideo(video)\n    return Object.assign(this, { ...newVideo, full: true })\n  }\n\n  /**\n   * Sets a new thumbnail for a video.\n   * Must be using an access token with correct scopes.\n   * @param image The image data and type to upload.\n   */\n  /* istanbul ignore next */\n  public async setThumbnail (image: { type: 'jpeg' | 'png'; data: Buffer }): Promise<typeof Video.prototype.thumbnails> {\n    const newThumbnails = await this.youtube.oauth.setThumbnail(this.id, image)\n    return Object.assign(this.thumbnails, newThumbnails)\n  }\n}\n"],"sourceRoot":"../../src"}